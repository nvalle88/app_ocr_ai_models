@model app_tramites.Models.ViewModel.QueryInput

@{
    ViewData["Title"] = "Demo OCR: Crear y Listar Casos";
}

<section id="widget-grid">
    <div class="d-flex justify-content-end align-items-center px-4 py-2" style="background: linear-gradient(90deg, #0d6efd, #0b5ed7); border-radius: 0.5rem 0.5rem 0 0;">
    </div>
    <div class="row">
        <!-- Widget Subida OCR -->
        <article class="col-lg-12">
            <div class="jarviswidget jarviswidget-color-darken border-0 shadow rounded-4" id="wid-id-upload" data-widget-editbutton="false" data-widget-deletebutton="false">
                <header class="bg-primary text-white px-4 py-3 d-flex justify-content-between align-items-center rounded-top-4 shadow-sm">
                    <!-- Lado izquierdo: icono + título -->
                    <div class="d-flex align-items-center">
                        <i class="fa-solid fa-file-circle-plus fs-2 me-2"></i>
                        <h2 class="h5 mb-0 fw-bold">Crear caso</h2>
                    </div>

                    <!-- Lado derecho: “marca” del sistema -->
                    <div class="d-flex align-items-center">
                        <i class="fa-solid fa-robot fs-5 me-1"></i>
                        <span class="fw-semibold">Nexus AI Auditor</span>
                    </div>
                </header>

                <div>
                    <div class="widget-body p-4">
                        <form id="ocrForm" novalidate autocomplete="off">
                            <input type="hidden" asp-for="ProcessCode" value="A-HOSP" />
                            <div class="row g-4">
                                <div class="col-12 col-md-4 position-relative">
                                    <div id="uploadArea"
                                         class="border border-2 border-dashed border-secondary rounded-4 p-4 text-center bg-light"
                                         style="min-height:200px; transition: box-shadow .3s; cursor:pointer;"
                                         aria-label="Arrastra o haz clic aquí para subir archivos">
                                        <i class="fa fa-cloud-upload-alt fa-3x text-secondary mb-3"></i>
                                        <h6 class="fw-bold mb-2">Arrastra o haz clic aquí</h6>
                                        <small class="text-muted d-block mb-3">PDF, JPG, PNG • Hasta 10MB</small>

                                        <!-- input INVISIBLE pero CUBRE TODO el area -->
                                        <input type="file"
                                               id="files"
                                               multiple
                                               accept=".pdf,.jpg,.jpeg,.png"
                                               style="
                                              position: absolute;
                                              top: 0; left: 0;
                                              width: 100%; height: 100%;
                                              opacity: 0;
                                              cursor: pointer;
                                            " />
                                    </div>
                                </div>
                                <div class="col-12 col-md-8">
                                    <label class="form-label fw-semibold mb-2">Previsualizaciones</label>
                                    <div id="previewGallery"
                                         class="d-flex flex-row flex-nowrap gap-3 border p-2 rounded-4 bg-white overflow-auto"
                                         style="min-height:120px; max-height:140px;"></div>
                                </div>
                            </div>
                            <div class="form-actions mt-4">
                                <div class="d-flex justify-content-between">
                                    <button type="submit" class="btn btn-primary btn-lg icon-action" id="btnCrearCaso">
                                        <i class="fas fa-plus-circle me-2"></i> Crear
                                    </button>
                                </div>

                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </article>

        <!-- Widget Tabla Casos -->
        <article class="col-lg-12">
            <div class="jarviswidget jarviswidget-color-darken border-0 shadow rounded-4" id="wid-id-table" data-widget-editbutton="false" data-widget-deletebutton="false">
                <header class="bg-primary text-white rounded-top-4 px-4 py-3">
                    <span class="widget-icon"><i class="fa fa-history"></i></span>
                    <h2 class="d-inline ms-2">Casos Existentes</h2>
                </header>
                <div>
                    <div class="widget-body p-0">
                        <div class="table-responsive rounded-bottom-4">
                            <table id="casesTable" class="table table-hover mb-0">
                                <thead class="table-light text-uppercase text-primary">
                                    <tr>
                                        <th>Código</th>
                                        <th>Fecha de recepci&oacute;n</th>
                                        <th>Estado de la evaluación </th>
                                        <th>Tipo</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ViewBag.ProcessCases != null && ((List<app_tramites.Models.ModelAi.ProcessCase>)ViewBag.ProcessCases).Any())
                                    {
                                        foreach (var c in (List<app_tramites.Models.ModelAi.ProcessCase>)ViewBag.ProcessCases)
                                        {
                                            bool done = c.FinalResponseResults?.Any() ?? false;
                                            string resumenCategoria = "No Evaluado";
                                            if (done)
                                            {
                                                var txt = string.Join(" ", c.FinalResponseResults.Select(r => r.ResponseText?.ToLower() ?? ""));
                                                if (txt.Contains("**desconocido**")) resumenCategoria = "No Definido";
                                                else if (txt.Contains("**ambulatorio**")) resumenCategoria = "Ambulatorio";
                                                else if (txt.Contains("**hospitalario**")) resumenCategoria = "Hospitalario";
                                                else if (txt.Contains("**hospital del día**")) resumenCategoria = "Hospital del Día";
                                                else resumenCategoria = "No Definido";
                                            }
                                            var date = c.StartDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm");
                                            <tr>
                                                <!-- Código -->
                                                <td class="fw-bold"><b> NE-@(((c.CaseCode.ToString() ?? "").Split('-').FirstOrDefault() ?? ""))</b></td>
                                                <!-- Fecha -->
                                                <td>@date</td>
                                                <!-- Estado ícono solamente -->
                                                <td class="text-left">
                                                    <i class="fa @(done ? "fa-check-circle text-success" : "fa-hourglass-start text-warning") fa-lg"></i>
                                                </td>
                                                <!-- Tipo -->
                                                <td class="fw-bold">
                                                    <i class="fa @(   !done ? "fa-clock text-muted" :
                     resumenCategoria == "No Definido" ? "fa-question text-danger" :
                     resumenCategoria == "Hospital del Día" ? "fa-hospital text-primary" :
                     resumenCategoria == "Hospitalario" ? "fa-briefcase-medical text-info" :
                     resumenCategoria == "Ambulatorio" ? "fa-stethoscope text-warning" :
                     "fa-file-medical text-secondary") me-1"></i>
                                                    @resumenCategoria
                                                </td>
                                                <!-- Acciones -->
                                                <td>
                                                    @if (done)
                                                    {
                                                        <a href="/Nexus/Details1?caseCode=@c.CaseCode" onclick="cargando()" class="btn btn-outline-primary btn-sm  icon-action rounded-circle"><i class="fa fa-eye"></i></a>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-success btn-sm rounded-circle btnProcessRow" data-casecode="@c.CaseCode"><i class="fa fa-play"></i></button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr><td colspan="6" class="text-center text-muted py-4">No hay casos disponibles</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </article>
    </div>
</section>

@section Scripts {
    <script>
            // Mostrar y ocultar loading
            function mostrarLoadingPanel() {
                if (typeof $ !== 'undefined' && $.fn.waitMe) {
                    $('#widget-grid').waitMe({ effect: 'bounce', text: 'Cargando...', bg: 'rgba(255,255,255,0.7)', color: '#224abe' });
                }
            }
            function ocultarLoadingPanel() {
                if (typeof $ !== 'undefined' && $.fn.waitMe) {
                    $('#widget-grid').waitMe('hide');
                }
            }

            // Drag & Drop y preview

            const uploadArea     = document.getElementById('uploadArea');
        const filesInput     = document.getElementById('files');
        const previewGallery = document.getElementById('previewGallery');

        // Drag & drop
        uploadArea.addEventListener('dragover', e => {
          e.preventDefault();
          uploadArea.classList.add('shadow-lg');
        });
        uploadArea.addEventListener('dragleave', e => {
          e.preventDefault();
          uploadArea.classList.remove('shadow-lg');
        });
        uploadArea.addEventListener('drop', e => {
          e.preventDefault();
          uploadArea.classList.remove('shadow-lg');

          const dt = new DataTransfer();
          Array.from(e.dataTransfer.files).forEach(f => dt.items.add(f));
          filesInput.files = dt.files;

          filesInput.dispatchEvent(new Event('change'));
        });

                    filesInput.addEventListener('change', () => {
            previewGallery.innerHTML = '';
            previewGallery.classList.toggle('d-none', !filesInput.files.length);

            Array.from(filesInput.files).forEach(f => {
                const ext = f.name.split('.').pop().toLowerCase();

                // container con clase 'preview-item' para estilos
                const container = document.createElement('div');
                container.className = 'preview-item';
                container.style.marginRight = '0.5rem';

                if (['jpg', 'jpeg', 'png'].includes(ext)) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.alt = f.name;
                        img.className = 'd-block';
                        container.appendChild(img);

                        // opcional: nombre archivo debajo
                        const nameEl = document.createElement('small');
                        nameEl.className = 'filename';
                        nameEl.textContent = f.name;
                        container.appendChild(nameEl);
                    };
                    reader.onerror = () => {
                        container.innerHTML = '<i class="fa-solid fa-triangle-exclamation file-icon"></i>';
                    };
                    reader.readAsDataURL(f);
                } else if (ext === 'pdf') {
                    // Icono grande para pdf
                    container.innerHTML = '<i class="fa-solid fa-file-pdf file-icon"></i><small class="filename"></small>';
                } else {
                    container.innerHTML = '<i class="fa-solid fa-file file-icon"></i><small class="filename"></small>';
                }

                previewGallery.appendChild(container);
            });
        });


            // Envío OCR y agregar fila
                           document.getElementById('ocrForm').addEventListener('submit', async e => {
                e.preventDefault();
                if (!filesInput.files.length) return alert('Selecciona al menos un archivo.');
                mostrarLoadingPanel();

                const filesToSend = await Promise.all(Array.from(filesInput.files).map(f => new Promise(res => {
                    const reader = new FileReader();
                    reader.onload = () => res({
                        FileName: f.name,
                        Content: reader.result.split(',')[1],
                        Extension: '.' + f.name.split('.').pop().toLowerCase()
                    });
                    reader.readAsDataURL(f);
                })));

                try {
                    const resp = await fetch('/Nexus/CreateCaseProcess', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ProcessCode: 'A-HOSP', Query: '', Files: filesToSend })
                    });

                    if (!resp.ok) throw new Error(resp.statusText);
                    const data = await resp.json();
                    ocultarLoadingPanel();

                    const dateStr = new Date(data.startDate).toLocaleString('es-EC', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });

                    const tbody = document.querySelector('#casesTable tbody');
                    tbody.insertAdjacentHTML('afterbegin', `
                        <tr>
                           <td class='fw-bold'>${'NE-' + ((data.caseCode || '').split('-')[0].replace(/^NE/i, ''))}</td>
                            <td>${dateStr}</td>
                            <td class='text-left'>
                                <i class='fa fa-hourglass-start text-warning fa-lg'></i>
                            </td>
                            <td class='fw-bold'>
                                <i class='fa fa-clock text-muted me-1'></i> Pendiente
                            </td>
                            <td>
                                <button class='btn btn-success btn-sm rounded-circle btnProcessRow' data-casecode='${data.caseCode}'>
                                    <i class='fa fa-play'></i>
                                </button>
                            </td>
                        </tr>
                    `);

                    filesInput.value = null;
                    previewGallery.classList.add('d-none');
                } catch (err) {
                    ocultarLoadingPanel();
                    alert('Error al crear el caso: ' + err.message);
                }
            });



            // Función para actualizar badge
            const badgeClasses = {
                Pendiente: 'bg-warning text-dark',
                'Procesando...': 'bg-info text-white',
                Evaluado: 'bg-success text-white',
                Error: 'bg-danger text-white'
            };
            function updateBadge(el, state) {
                el.className = 'badge ' + (badgeClasses[state] || 'bg-secondary text-white');
                el.textContent = state;
            }

            // Procesar caso
                    async function processCase(btn) {
                btn.disabled = true;
                const orig = btn.innerHTML;
                btn.innerHTML = `<i class='fa fa-spinner fa-spin'></i>`;
                const row = btn.closest('tr');
                const estadoEl = row.children[2].querySelector('i');
                const tipoCell = row.children[3];

                // Mostrar icono spinner y texto animado "Analizando..."
                estadoEl.className = 'fas fa-spinner fa-spin text-info fa-lg';
                tipoCell.innerHTML = `<span class="typing-animation">Analizando...</span>`;

                        tipoCell.innerHTML = `<span class="typing-animation">Analizando...</span>`;

        // Lista de mensajes
                const mensajes = [
                  "Extrayendo...",
                  "Resumiendo...",
                  "Verificando...",
                  "Leyendo...",
                  "Analizando..."
                ];

                // Función para colores aleatorios
                function colorAleatorio() {
                  const colores = ["#007bff", "#28a745", "#ffc107", "#dc3545", "#17a2b8", "#6610f2"];
                  return colores[Math.floor(Math.random() * colores.length)];
                }

                let indice = 0;

                // Cambio cada 0.7 segundos
                setInterval(() => {
                  const span = document.querySelector(".typing-animation");
                  if (span) {
                    indice = (indice + 1) % mensajes.length;
                    span.textContent = mensajes[indice];
                    span.style.color = colorAleatorio();
                  }
                }, 2000);

                try {
                    const form = new FormData();
                    form.append('caseCode', btn.dataset.casecode);

                    const res = await fetch('/Nexus/ProcessCaseAjax', {
                        method: 'POST',
                        body: form
                    });
                    if (!res.ok) throw new Error();
                    const json = await res.json();

                    const cat = (json.typeCase || 'Generado').trim().toLowerCase();

                    // Icono de estado
                    estadoEl.className = 'fas fa-check-circle text-success fa-lg';

                    // Seleccionar icono y texto para FA6
                    let tipoIconClass = 'file-medical text-secondary';
                    let tipoNombre = 'Generado';
                          if (cat.includes('no definido')) {
                                    tipoIconClass = 'question text-danger';
                                tipoNombre = 'No Definido';
                          }
                                else if (cat.includes('hospital del día')) {
                                    tipoIconClass = 'hospital text-primary';
                                    tipoNombre = 'Hospital del Día';
                                }
                                else if (cat.includes('hospitalario')) {
                                    tipoIconClass = 'briefcase-medical text-info';
                                    tipoNombre = 'Hospitalario';
                                } else if (cat.includes('ambulatorio')) {
                                    tipoIconClass = 'stethoscope text-warning';
                                    tipoNombre = 'Ambulatorio';
                                }
                    
                                tipoCell.innerHTML = `<i class="fas fa-${tipoIconClass} fa-lg me-1"></i> <span>${tipoNombre}</span>`;

                    
                                row.children[4].innerHTML = `<a href='/Nexus/Details1?caseCode=${btn.dataset.casecode}' class='btn btn-outline-primary btn-sm rounded-circle'><i class='fas fa-eye'></i></a>`;
                
                            } 
                            catch {
                                estadoEl.className = 'fas fa-times-circle text-danger fa-lg';
                    
                                tipoCell.innerHTML = `<i class="fas fa-exclamation-circle text-danger fa-lg"></i>`;
                    
                                btn.innerHTML = orig;
                    
                                btn.disabled = false;
                
                            }
            }

            // Eventos globales
           
            document.addEventListener('click', e => {
                const b = e.target.closest('.btnProcessRow'); if (b) processCase(b);
            });



    </script>

    <style>
        .btnProcessRow,
        .btnViewDetails,
        .icon-action {
            cursor: pointer;
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
        }

            /* Efecto hover para indicar que es interactivo */
            .btnProcessRow:hover,
            .btnViewDetails:hover,
            .icon-action:hover {
                box-shadow: 0 0 0 2px rgba(0,123,255,0.2);
            }

        .border-dashed {
            border-style: dashed;
        }

        .rounded-4 {
            border-radius: 1.25rem;
        }

        .shadow-lg {
            box-shadow: 0 1rem 3rem rgba(0,0,0,.175);
        }

        #previewGallery img {
            margin: .25rem;
        }

        /* Badges de tipo iniciales */
        td:nth-child(5) .badge {
            min-width: 48px;
        }


        .typing-animation {
            display: inline-block;
            font-family: monospace;
            white-space: nowrap;
            overflow: hidden;
            border-right: 2px solid #007bff;
            animation: typing 2.5s steps(12, end) infinite;
            font-weight: 500;
            color: #007bff;
            max-width: 12ch;
        }

        @@keyframes typing {
            0% {
                width: 0;
            }

            50% {
                width: 12ch;
            }

            100% {
                width: 0;
            }
        }

        /* Preview gallery: fila horizontal, miniaturas más grandes */
        #previewGallery {
            display: flex;
            gap: 0.75rem;
            align-items: flex-start;
            padding: .5rem;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

            /* Cada miniatura (estilo consistente) */
            #previewGallery .preview-item {
                flex: 0 0 auto; /* no se encoge, no se expande */
                width: 140px; /* ancho nuevo — ajusta si quieres más/menos */
                height: 140px; /* alto nuevo (puedes usar 140px para cuadrados) */
                border-radius: .75rem;
                overflow: hidden;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                background: #ffffff;
                box-shadow: 0 4px 12px rgba(0,0,0,0.06);
                border: 1px solid rgba(0,0,0,0.04);
            }

                /* Imagen dentro de la miniatura: cubrir recortando (mejor aspecto) */
                #previewGallery .preview-item img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover; /* importante para ocupar todo el recuadro */
                    display: block;
                }

                /* Iconos para PDF u otros: centrados y más grandes */
                #previewGallery .preview-item .file-icon {
                    font-size: 2.1rem;
                    color: #d63333; /* rojo para pdf, puedes cambiar */
                }

                /* Texto pequeño debajo (opcional) */
                #previewGallery .preview-item .filename {
                    display: block;
                    font-size: 0.85rem;
                    color: #495057;
                    margin-top: .35rem;
                    text-align: center;
                    max-width: 130px;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    white-space: nowrap;
                }

    </style>
}
